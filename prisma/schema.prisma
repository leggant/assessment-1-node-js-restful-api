// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  firstName            String
  lastName             String
  userName             String              @unique
  email                String              @unique
  password             String
  profileImgURL        String
  roleType             Role                @default(BASIC_USER)
  UserScore            UserScore?          @relation(fields: [userScoreId], references: [id])
  userScoreId          Int?
  UserParticipant      UserParticipant?    @relation(fields: [userParticipantId], references: [id])
  userParticipantId    Int?
  UserQuestionAnswer   UserQuestionAnswer? @relation(fields: [userQuestionAnswerId], references: [id])
  userQuestionAnswerId Int?

  @@index([email, userName])
}

model UserScore {
  id     Int    @id @default(autoincrement())
  userId String
  quizId String
  score  Int
  user   User[]
  quiz   Quiz[]

  @@unique([id, userId, quizId])
}

model UserParticipant {
  id     Int    @id @default(autoincrement())
  userId String
  quizId String
  user   User[]
  quiz   Quiz[]

  @@unique([id, userId, quizId])
}

model UserQuestionAnswer {
  id            Int        @id @default(autoincrement())
  userId        String
  quizId        String
  questionId    Int
  correctAnswer Boolean    @default(false)
  user          User[]
  quiz          Quiz[]
  question      Question[]

  @@unique([id, userId, quizId, questionId])
}

model Category {
  id   Int    @id
  name String @unique
  Quiz Quiz[]
}

model Question {
  id                   Int                @id @default(autoincrement())
  quizId               String             @unique
  question             String
  correctAnswer        String
  incorrectAnswers     Json
  UserQuestionAnswer   UserQuestionAnswer @relation(fields: [userQuestionAnswerId], references: [id])
  userQuestionAnswerId Int
  Quiz                 Quiz               @relation(fields: [quizId], references: [id])

  @@unique([id, quizId])
}

model Quiz {
  id                   String             @id @default(uuid())
  name                 String
  answerType           AnswerType         @default(multiple)
  difficulty           Difficulty         @default(easy)
  startDate            DateTime
  endDate              DateTime?
  questionList         Json
  scoreList            Json
  categoryId           Int
  category             Category           @relation(fields: [categoryId], references: [id])
  questionId           Int
  UserScore            UserScore          @relation(fields: [userScoreId], references: [id])
  userScoreId          Int
  UserParticipant      UserParticipant    @relation(fields: [userParticipantId], references: [id])
  userParticipantId    Int
  UserQuestionAnswer   UserQuestionAnswer @relation(fields: [userQuestionAnswerId], references: [id])
  userQuestionAnswerId Int
  question             Question[]

  @@unique([id, categoryId, name])
}

enum Role {
  BASIC_USER
  ADMIN_USER
}

enum Difficulty {
  easy
  medium
  hard
}

enum AnswerType {
  boolean
  multiple
}
