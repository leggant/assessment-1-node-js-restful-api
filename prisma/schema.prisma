// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  BASIC_USER
  ADMIN_USER
}

enum Difficulty {
  easy
  medium
  hard
}

enum AnswerType {
  boolean
  multiple
}

model User {
  id                  String               @id @default(uuid())
  firstName           String
  lastName            String
  userName            String               @unique
  email               String               @unique
  password            String
  profileImgURL       String               @unique
  role                Role                 @default(BASIC_USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userScores          UserScore[]
  userParticipateQuiz UserParticipate[]
  userQuestionAnswer  UserQuestionAnswer[]
}

model BlockedToken {
  id        Int      @id @default(autoincrement())
  token     String
  exp       BigInt
  createdAt DateTime @default(now())
}

model UserScore {
  id        Int      @id @default(autoincrement())
  userId    String
  quizId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model UserParticipate {
  id        Int      @id @default(autoincrement())
  userId    String
  quizId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model UserQuestionAnswer {
  id            Int      @id @default(autoincrement())
  userId        String
  quizId        Int
  questionId    Int
  answer        String
  correctAnswer Boolean  @default(false)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  question      Question @relation(fields: [questionId], references: [id])
}

model Category {
  id        Int      @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quizzes   Quiz[]
}

model Question {
  id                  Int                  @id @default(autoincrement())
  quizId              Int?
  question            String
  correctAnswer       String
  incorrectAnswers    Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  quiz                Quiz?                @relation(fields: [quizId], references: [id])
  userQuestionAnswers UserQuestionAnswer[]
}

model Quiz {
  id                  Int                  @id @default(autoincrement())
  categoryId          Int
  name                String
  answerType          AnswerType           @default(multiple)
  difficulty          Difficulty           @default(easy)
  startDate           DateTime             @default(now())
  endDate             DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  questions           Question[]
  userQuestionAnswers UserQuestionAnswer[]
  userParticipateQuiz UserParticipate[]
  userScores          UserScore[]
  category            Category             @relation(fields: [categoryId], references: [id])
}
